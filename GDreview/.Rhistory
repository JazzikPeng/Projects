x_seq[,1] = x0
p_seq[,1] = c(0,0)
fval_seq[1] = 0.5 * ( t(x0) %*% A %*% x0)
alpha = 4 / (sqrt(lipschtiz) + sqrt(strongconvex))^2
beta = ( 1 - 2 / ( sqrt(lipschtiz/strongconvex) + 1) )^2
for (i in seq_len(iterations+1)){
gradient = A %*% x_seq[,i]
x_seq[,i+1] = x_seq[,i] + alpha * p_seq[i]
p_seq[i+1] = -gradient + beta * p_seq[i]
fval_seq[i+1] =  0.5 * ( t(x_seq[,i+1]) %*% A %*% x_seq[,i+1])
}
p_seq
A = cbind(c(lipschtiz,0),c(0,strongconvex))
x_seq = matrix(ncol=(iterations+1), nrow=2)
fval_seq = rep(0,iterations+1)
p_seq = matrix(ncol=(iterations+1), nrow=2)
x_seq[,1] = x0
p_seq[,1] = matrix(c(0,0),nrow=2)
fval_seq[1] = 0.5 * ( t(x0) %*% A %*% x0)
alpha = 4 / (sqrt(lipschtiz) + sqrt(strongconvex))^2
beta = ( 1 - 2 / ( sqrt(lipschtiz/strongconvex) + 1) )^2
for (i in seq_len(iterations+1)){
gradient = A %*% x_seq[,i]
x_seq[,i+1] = x_seq[,i] + alpha * p_seq[i]
p_seq[i+1] = -gradient + beta * p_seq[i]
fval_seq[i+1] =  0.5 * ( t(x_seq[,i+1]) %*% A %*% x_seq[,i+1])
}
hb <- function(x0,lipschtiz,strongconvex,iterations){
A = cbind(c(lipschtiz,0),c(0,strongconvex))
x_seq = matrix(ncol=(iterations+1), nrow=2)
fval_seq = rep(0,iterations+1)
p_seq = matrix(ncol=(iterations+1), nrow=2)
x_seq[,1] = x0
p_seq[,1] = matrix(c(0,0),nrow=2)
fval_seq[1] = 0.5 * ( t(x0) %*% A %*% x0)
alpha = 4 / (sqrt(lipschtiz) + sqrt(strongconvex))^2
beta = ( 1 - 2 / ( sqrt(lipschtiz/strongconvex) + 1) )^2
for (i in seq_len(iterations+1)){
gradient = A %*% x_seq[,i]
x_seq[,i+1] = x_seq[,i] + alpha * p_seq[i]
p_seq[i+1] = -gradient + beta * p_seq[i]
fval_seq[i+1] =  0.5 * ( t(x_seq[,i+1]) %*% A %*% x_seq[,i+1])
}
# for contour plot
x1 <- seq(-(1.1*x0[1,]),(1.1*x0[2,]),length.out = 100)
x2 <- seq(-(1.1*x0[1,]),(1.1*x0[2,]),length.out = 100)
z <- matrix(ncol=100,nrow=100)
for (i in seq_len(100)){
for (j in seq_len(100)){
x <- c(x1[i],x2[j])
z[i,j] <- 0.5 * t(x) %*% A %*% x
}
}
results = list (fval_seq = fval_seq, x_seq = x_seq, x1=x1, x2=x2, z=z)
return (results)
}
x0 = matrix(c(0.1,0.1),nrow=2)
lipschtiz=20
strongconvex=1
iterations=100
results_hb = hb(x0,lipschtiz=200,strongconvex=1,iterations=100)
A = cbind(c(lipschtiz,0),c(0,strongconvex))
x_seq = matrix(ncol=(iterations+1), nrow=2)
fval_seq = rep(0,iterations+1)
p_seq = matrix(ncol=(iterations+1), nrow=2)
x_seq[,1] = x0
p_seq[,1] = matrix(c(0,0),nrow=2)
p_seq
fval_seq[1] = 0.5 * ( t(x0) %*% A %*% x0)
alpha = 4 / (sqrt(lipschtiz) + sqrt(strongconvex))^2
beta = ( 1 - 2 / ( sqrt(lipschtiz/strongconvex) + 1) )^2
gradient = A %*% x_seq[,1]
gradient
i = 1
x_seq[,i+1] = x_seq[,i] + alpha * p_seq[i]
p_seq[i+1] = -gradient + beta * p_seq[i]
p_seq[,i+1] = -gradient + beta * p_seq[i]
p_seq[,i+1] = -gradient + beta * p_seq[i]
hb <- function(x0,lipschtiz,strongconvex,iterations){
A = cbind(c(lipschtiz,0),c(0,strongconvex))
x_seq = matrix(ncol=(iterations+1), nrow=2)
fval_seq = rep(0,iterations+1)
p_seq = matrix(ncol=(iterations+1), nrow=2)
x_seq[,1] = x0
p_seq[,1] = matrix(c(0,0),nrow=2)
fval_seq[1] = 0.5 * ( t(x0) %*% A %*% x0)
alpha = 4 / (sqrt(lipschtiz) + sqrt(strongconvex))^2
beta = ( 1 - 2 / ( sqrt(lipschtiz/strongconvex) + 1) )^2
for (i in seq_len(iterations+1)){
gradient = A %*% x_seq[,i]
x_seq[,i+1] = x_seq[,i] + alpha * p_seq[i]
p_seq[,i+1] = -gradient + beta * p_seq[i]
fval_seq[i+1] =  0.5 * ( t(x_seq[,i+1]) %*% A %*% x_seq[,i+1])
}
# for contour plot
x1 <- seq(-(1.1*x0[1,]),(1.1*x0[2,]),length.out = 100)
x2 <- seq(-(1.1*x0[1,]),(1.1*x0[2,]),length.out = 100)
z <- matrix(ncol=100,nrow=100)
for (i in seq_len(100)){
for (j in seq_len(100)){
x <- c(x1[i],x2[j])
z[i,j] <- 0.5 * t(x) %*% A %*% x
}
}
results = list (fval_seq = fval_seq, x_seq = x_seq, x1=x1, x2=x2, z=z)
return (results)
}
x0 = matrix(c(0.1,0.1),nrow=2)
lipschtiz=20
strongconvex=1
iterations=100
results_hb = hb(x0,lipschtiz=200,strongconvex=1,iterations=100)
A = cbind(c(lipschtiz,0),c(0,strongconvex))
x_seq = matrix(ncol=(iterations+1), nrow=2)
fval_seq = rep(0,iterations+1)
p_seq = matrix(ncol=(iterations+1), nrow=2)
x_seq[,1] = x0
p_seq[,1] = matrix(c(0,0),nrow=2)
fval_seq[1] = 0.5 * ( t(x0) %*% A %*% x0)
alpha = 4 / (sqrt(lipschtiz) + sqrt(strongconvex))^2
beta = ( 1 - 2 / ( sqrt(lipschtiz/strongconvex) + 1) )^2
for (i in seq_len(iterations+1)){
gradient = A %*% x_seq[,i]
x_seq[,i+1] = x_seq[,i] + alpha * p_seq[i]
p_seq[,i+1] = -gradient + beta * p_seq[i]
fval_seq[i+1] =  0.5 * ( t(x_seq[,i+1]) %*% A %*% x_seq[,i+1])
}
A = cbind(c(lipschtiz,0),c(0,strongconvex))
x_seq = matrix(ncol=(iterations+1), nrow=2)
fval_seq = rep(0,iterations+1)
p_seq = matrix(ncol=(iterations+1), nrow=2)
x_seq[,1] = x0
p_seq[,1] = matrix(c(0,0),nrow=2)
fval_seq[1] = 0.5 * ( t(x0) %*% A %*% x0)
alpha = 4 / (sqrt(lipschtiz) + sqrt(strongconvex))^2
beta = ( 1 - 2 / ( sqrt(lipschtiz/strongconvex) + 1) )^2
for (i in seq_len(iterations)){
gradient = A %*% x_seq[,i]
x_seq[,i+1] = x_seq[,i] + alpha * p_seq[i]
p_seq[,i+1] = -gradient + beta * p_seq[i]
fval_seq[i+1] =  0.5 * ( t(x_seq[,i+1]) %*% A %*% x_seq[,i+1])
}
fval_seq
hb <- function(x0,lipschtiz,strongconvex,iterations){
A = cbind(c(lipschtiz,0),c(0,strongconvex))
x_seq = matrix(ncol=(iterations+1), nrow=2)
fval_seq = rep(0,iterations+1)
p_seq = matrix(ncol=(iterations+1), nrow=2)
x_seq[,1] = x0
p_seq[,1] = matrix(c(0,0),nrow=2)
fval_seq[1] = 0.5 * ( t(x0) %*% A %*% x0)
alpha = 4 / (sqrt(lipschtiz) + sqrt(strongconvex))^2
beta = ( 1 - 2 / ( sqrt(lipschtiz/strongconvex) + 1) )^2
for (i in seq_len(iterations)){
gradient = A %*% x_seq[,i]
x_seq[,i+1] = x_seq[,i] + alpha * p_seq[i]
p_seq[,i+1] = -gradient + beta * p_seq[i]
fval_seq[i+1] =  0.5 * ( t(x_seq[,i+1]) %*% A %*% x_seq[,i+1])
}
# for contour plot
x1 <- seq(-(1.1*x0[1,]),(1.1*x0[2,]),length.out = 100)
x2 <- seq(-(1.1*x0[1,]),(1.1*x0[2,]),length.out = 100)
z <- matrix(ncol=100,nrow=100)
for (i in seq_len(100)){
for (j in seq_len(100)){
x <- c(x1[i],x2[j])
z[i,j] <- 0.5 * t(x) %*% A %*% x
}
}
results = list (fval_seq = fval_seq, x_seq = x_seq, x1=x1, x2=x2, z=z)
return (results)
}
x0 = matrix(c(0.1,0.1),nrow=2)
lipschtiz=20
strongconvex=1
iterations=100
results_hb = hb(x0,lipschtiz=200,strongconvex=1,iterations=100)
results_hb$fval_seq
hb <- function(x0,lipschtiz,strongconvex,iterations){
A = cbind(c(lipschtiz,0),c(0,strongconvex))
x_seq = matrix(ncol=(iterations+1), nrow=2)
fval_seq = rep(0,iterations+1)
x_seq[,1] = x0
p_seq = x0
fval_seq[1] = 0.5 * ( t(x0) %*% A %*% x0)
alpha = 4 / (sqrt(lipschtiz) + sqrt(strongconvex))^2
beta = ( 1 - 2 / ( sqrt(lipschtiz/strongconvex) + 1) )^2
for (i in seq_len(iterations)){
#gradient = A %*% x_seq[,i]
x_seq[,i+1] = x_seq[,i] + alpha * p_seq
p_seq = -(A %*% x_seq[,i]) + beta * p_seq
fval_seq[i+1] =  0.5 * ( t(x_seq[,i+1]) %*% A %*% x_seq[,i+1])
}
# for contour plot
x1 <- seq(-(1.1*x0[1,]),(1.1*x0[2,]),length.out = 100)
x2 <- seq(-(1.1*x0[1,]),(1.1*x0[2,]),length.out = 100)
z <- matrix(ncol=100,nrow=100)
for (i in seq_len(100)){
for (j in seq_len(100)){
x <- c(x1[i],x2[j])
z[i,j] <- 0.5 * t(x) %*% A %*% x
}
}
results = list (fval_seq = fval_seq, x_seq = x_seq, x1=x1, x2=x2, z=z)
return (results)
}
x0 = matrix(c(0.1,0.1),nrow=2)
lipschtiz=20
strongconvex=1
iterations=100
results_hb = hb(x0,lipschtiz=200,strongconvex=1,iterations=100)
results_hb$fval_seq
hb <- function(x0,lipschtiz,strongconvex,iterations){
A = cbind(c(lipschtiz,0),c(0,strongconvex))
x_seq = matrix(ncol=(iterations+1), nrow=2)
fval_seq = rep(0,iterations+1)
p_seq = matrix(ncol=(iterations+1), nrow=2)
x_seq[,1] = x0
p_seq[,1] = matrix(c(0,0),nrow=2)
fval_seq[1] = 0.5 * ( t(x0) %*% A %*% x0)
alpha = 4 / (sqrt(lipschtiz) + sqrt(strongconvex))^2
beta = ( 1 - 2 / ( sqrt(lipschtiz/strongconvex) + 1) )^2
for (i in seq_len(iterations)){
#gradient = A %*% x_seq[,i]
x_seq[,i+1] = x_seq[,i] + alpha * p_seq[,i]
p_seq[,i+1] = -(A %*% x_seq[,i]) + beta * p_seq[,i]
fval_seq[i+1] =  0.5 * ( t(x_seq[,i+1]) %*% A %*% x_seq[,i+1])
}
# for contour plot
x1 <- seq(-(1.1*x0[1,]),(1.1*x0[2,]),length.out = 100)
x2 <- seq(-(1.1*x0[1,]),(1.1*x0[2,]),length.out = 100)
z <- matrix(ncol=100,nrow=100)
for (i in seq_len(100)){
for (j in seq_len(100)){
x <- c(x1[i],x2[j])
z[i,j] <- 0.5 * t(x) %*% A %*% x
}
}
results = list (fval_seq = fval_seq, x_seq = x_seq, x1=x1, x2=x2, z=z)
return (results)
}
x0 = matrix(c(0.1,0.1),nrow=2)
results_hb = hb(x0,lipschtiz=200,strongconvex=1,iterations=100)
results_hb$fval_seq
3*10
3:10
hb <- function(x0,lipschtiz,strongconvex,iterations){
A = cbind(c(lipschtiz,0),c(0,strongconvex))
x_seq = matrix(ncol=(iterations+1), nrow=2)
fval_seq = rep(0,iterations+1)
x_seq[,1] = x0
x_seq[,2] = x0
fval_seq[1] = 0.5 * ( t(x0) %*% A %*% x0)
fval_seq[2] = 0.5 * ( t(x0) %*% A %*% x0)
alpha = 4 / (sqrt(lipschtiz) + sqrt(strongconvex))^2
beta = ( 1 - 2 / ( sqrt(lipschtiz/strongconvex) + 1) )^2
for (i in 2:interations){
#gradient = A %*% x_seq[,i]
x_seq[,i+1] = x_seq[,i] - alpha * A %*% x_seq[,i] + beta * (x_seq[,i] - x_seq[,i-1])
fval_seq[i+1] =  0.5 * ( t(x_seq[,i+1]) %*% A %*% x_seq[,i+1])
}
# for contour plot
x1 <- seq(-(1.1*x0[1,]),(1.1*x0[2,]),length.out = 100)
x2 <- seq(-(1.1*x0[1,]),(1.1*x0[2,]),length.out = 100)
z <- matrix(ncol=100,nrow=100)
for (i in seq_len(100)){
for (j in seq_len(100)){
x <- c(x1[i],x2[j])
z[i,j] <- 0.5 * t(x) %*% A %*% x
}
}
results = list (fval_seq = fval_seq, x_seq = x_seq, x1=x1, x2=x2, z=z)
return (results)
}
x0 = matrix(c(0.1,0.1),nrow=2)
lipschtiz=20
strongconvex=1
iterations=100
results_hb = hb(x0,lipschtiz=200,strongconvex=1,iterations=100)
hb <- function(x0,lipschtiz,strongconvex,iterations){
A = cbind(c(lipschtiz,0),c(0,strongconvex))
x_seq = matrix(ncol=(iterations+1), nrow=2)
fval_seq = rep(0,iterations+1)
x_seq[,1] = x0
x_seq[,2] = x0
fval_seq[1] = 0.5 * ( t(x0) %*% A %*% x0)
fval_seq[2] = 0.5 * ( t(x0) %*% A %*% x0)
alpha = 4 / (sqrt(lipschtiz) + sqrt(strongconvex))^2
beta = ( 1 - 2 / ( sqrt(lipschtiz/strongconvex) + 1) )^2
for (i in 2:iterations){
#gradient = A %*% x_seq[,i]
x_seq[,i+1] = x_seq[,i] - alpha * A %*% x_seq[,i] + beta * (x_seq[,i] - x_seq[,i-1])
fval_seq[i+1] =  0.5 * ( t(x_seq[,i+1]) %*% A %*% x_seq[,i+1])
}
# for contour plot
x1 <- seq(-(1.1*x0[1,]),(1.1*x0[2,]),length.out = 100)
x2 <- seq(-(1.1*x0[1,]),(1.1*x0[2,]),length.out = 100)
z <- matrix(ncol=100,nrow=100)
for (i in seq_len(100)){
for (j in seq_len(100)){
x <- c(x1[i],x2[j])
z[i,j] <- 0.5 * t(x) %*% A %*% x
}
}
results = list (fval_seq = fval_seq, x_seq = x_seq, x1=x1, x2=x2, z=z)
return (results)
}
x0 = matrix(c(0.1,0.1),nrow=2)
lipschtiz=20
strongconvex=1
iterations=100
results_hb = hb(x0,lipschtiz=200,strongconvex=1,iterations=100)
results_hb$fval_seq
x0 = matrix(c(0.1,0.1),nrow=2)
results_hb = hb(x0,lipschtiz=200,strongconvex=1,iterations=100)
results_hb$fval_seq
contour(x = results_hb$x1, y = results_hb$x2,z = results_hb$z,
nlev = 50, lty = 2, method = "simple",
drawlabels = F,axes = TRUE,
xlab=expression(x[1]),ylab=expression(x[2]))
lines(x=results_hb$x_seq[1,],y=results_hb$x_seq[2,],col="blue",pch=1)
nagd <- function(x0,lipschtiz,strongconvex,iterations){
A = cbind(c(lipschtiz,0),c(0,strongconvex))
x_seq = matrix(ncol=(iterations+1), nrow=2)
fval_seq = rep(0,iterations+1)
x_seq[,1] = x0
fval_seq[1] = 0.5 * ( t(x0) %*% A %*% x0)
lambda = 0
y = x_seq[,1]
for (i in 1:iterations){
lambda = 0.5 * (1.0 + np.sqrt(1+4.0*lambda**2))
lambda_new = 0.5 * (1.0 + np.sqrt(1+4.0*lambda**2))
gamma = (1 - lambda) / lambda_new
y_new = x_seq[,i] - (1 / lipschtiz) * A %*% x_seq[,i]
x_seq[,i+1] = (1 - gamma) * y_new + gamma * y
fval_seq[i+1] =  0.5 * ( t(x_seq[,i+1]) %*% A %*% x_seq[,i+1])
}
# for contour plot
x1 <- seq(-(1.1*x0[1,]),(1.1*x0[2,]),length.out = 100)
x2 <- seq(-(1.1*x0[1,]),(1.1*x0[2,]),length.out = 100)
z <- matrix(ncol=100,nrow=100)
for (i in seq_len(100)){
for (j in seq_len(100)){
x <- c(x1[i],x2[j])
z[i,j] <- 0.5 * t(x) %*% A %*% x
}
}
results = list (fval_seq = fval_seq, x_seq = x_seq, x1=x1, x2=x2, z=z)
return (results)
}
x0 = matrix(c(0.1,0.1),nrow=2)
results_nagd = hb(x0,lipschtiz=200,strongconvex=1,iterations=100)
results_nagd = nagd(x0,lipschtiz=200,strongconvex=1,iterations=100)
nagd <- function(x0,lipschtiz,strongconvex,iterations){
A = cbind(c(lipschtiz,0),c(0,strongconvex))
x_seq = matrix(ncol=(iterations+1), nrow=2)
fval_seq = rep(0,iterations+1)
x_seq[,1] = x0
fval_seq[1] = 0.5 * ( t(x0) %*% A %*% x0)
lambda = 0
y = x_seq[,1]
for (i in 1:iterations){
lambda = 0.5 * (1.0 + sqrt(1+4.0*lambda**2))
lambda_new = 0.5 * (1.0 + sqrt(1+4.0*lambda**2))
gamma = (1 - lambda) / lambda_new
y_new = x_seq[,i] - (1 / lipschtiz) * A %*% x_seq[,i]
x_seq[,i+1] = (1 - gamma) * y_new + gamma * y
fval_seq[i+1] =  0.5 * ( t(x_seq[,i+1]) %*% A %*% x_seq[,i+1])
}
# for contour plot
x1 <- seq(-(1.1*x0[1,]),(1.1*x0[2,]),length.out = 100)
x2 <- seq(-(1.1*x0[1,]),(1.1*x0[2,]),length.out = 100)
z <- matrix(ncol=100,nrow=100)
for (i in seq_len(100)){
for (j in seq_len(100)){
x <- c(x1[i],x2[j])
z[i,j] <- 0.5 * t(x) %*% A %*% x
}
}
results = list (fval_seq = fval_seq, x_seq = x_seq, x1=x1, x2=x2, z=z)
return (results)
}
x0 = matrix(c(0.1,0.1),nrow=2)
results_nagd = nagd(x0,lipschtiz=200,strongconvex=1,iterations=100)
contour(x = results_nagd$x1, y = results_nagd$x2,z = results_nagd$z,
nlev = 50, lty = 2, method = "simple",
drawlabels = F,axes = TRUE,
xlab=expression(x[1]),ylab=expression(x[2]))
lines(x=results_nagd$x_seq[1,],y=results_nagd$x_seq[2,],col="blue",pch=1)
points(x=0,y=0,col="red")
results_nagd$fval_seq
nagd <- function(x0,lipschtiz,strongconvex,iterations){
A = cbind(c(lipschtiz,0),c(0,strongconvex))
x_seq = matrix(ncol=(iterations+1), nrow=2)
fval_seq = rep(0,iterations+1)
x_seq[,1] = x0
fval_seq[1] = 0.5 * ( t(x0) %*% A %*% x0)
lambda = 0
y = x_seq[,1]
for (i in 1:iterations){
lambda = 0.5 * (1 + sqrt(1+4*lambda^2))
lambda_new = 0.5 * (1 + sqrt(1+4*lambda^2))
gamma = (1 - lambda) / lambda_new
y_new = x_seq[,i] - (1 / lipschtiz) * A %*% x_seq[,i]
x_seq[,i+1] = (1 - gamma) * y_new + gamma * y
y = y_new
fval_seq[i+1] =  0.5 * ( t(x_seq[,i+1]) %*% A %*% x_seq[,i+1])
}
# for contour plot
x1 <- seq(-(1.1*x0[1,]),(1.1*x0[2,]),length.out = 100)
x2 <- seq(-(1.1*x0[1,]),(1.1*x0[2,]),length.out = 100)
z <- matrix(ncol=100,nrow=100)
for (i in seq_len(100)){
for (j in seq_len(100)){
x <- c(x1[i],x2[j])
z[i,j] <- 0.5 * t(x) %*% A %*% x
}
}
results = list (fval_seq = fval_seq, x_seq = x_seq, x1=x1, x2=x2, z=z)
return (results)
}
x0 = matrix(c(0.1,0.1),nrow=2)
results_nagd = nagd(x0,lipschtiz=200,strongconvex=1,iterations=100)
results_nagd$fval_seq
results_nagd = nagd(x0,lipschtiz=200,strongconvex=1,iterations=100)
contour(x = results_nagd$x1, y = results_nagd$x2,z = results_nagd$z,
nlev = 50, lty = 2, method = "simple",
drawlabels = F,axes = TRUE,
xlab=expression(x[1]),ylab=expression(x[2]))
lines(x=results_nagd$x_seq[1,],y=results_nagd$x_seq[2,],col="blue",pch=1)
contour(x = results_nagd$x1, y = results_nagd$x2,z = results_nagd$z,
nlev = 50, lty = 2, method = "simple",
drawlabels = F,axes = TRUE,
xlab=expression(x[1]),ylab=expression(x[2]))
lines(x=results_nagd$x_seq[1,],y=results_nagd$x_seq[2,],col="blue",pch=1)
points(x=0,y=0,col="red")
results_nagd$fval_seq
plot(results$fval_seq,type="l")
rnorm(2)
nagd <- function(x0,lipschtiz,strongconvex,iterations){
A = cbind(c(lipschtiz,0),c(0,strongconvex))
x_seq = matrix(ncol=(iterations+1), nrow=2)
fval_seq = rep(0,iterations+1)
x_seq[,1] = x0
fval_seq[1] = 0.5 * ( t(x0) %*% A %*% x0)
lambda = 0
y = x_seq[,1]
for (i in 1:iterations){
lambda = 0.5 * (1 + sqrt(1+4*lambda^2))
lambda_new = 0.5 * (1 + sqrt(1+4*lambda^2))
gamma = (1 - lambda) / lambda_new
set.seed(i+1)
noise = matrix(rnorm(2),nrow=2)
y_new = x_seq[,i] - (1 / lipschtiz) * ( A %*% x_seq[,i] + noise)
x_seq[,i+1] = (1 - gamma) * y_new + gamma * y
y = y_new
fval_seq[i+1] =  0.5 * ( t(x_seq[,i+1]) %*% A %*% x_seq[,i+1])
}
# for contour plot
x1 <- seq(-(1.1*x0[1,]),(1.1*x0[2,]),length.out = 100)
x2 <- seq(-(1.1*x0[1,]),(1.1*x0[2,]),length.out = 100)
z <- matrix(ncol=100,nrow=100)
for (i in seq_len(100)){
for (j in seq_len(100)){
x <- c(x1[i],x2[j])
z[i,j] <- 0.5 * t(x) %*% A %*% x
}
}
results = list (fval_seq = fval_seq, x_seq = x_seq, x1=x1, x2=x2, z=z)
return (results)
}
x0 = matrix(c(0.1,0.1),nrow=2)
results_diverge = nagd(x0,lipschtiz=200,strongconvex=1,iterations=100)
rnorm(2)
results_diverge$fval_seq
nagd <- function(x0,lipschtiz,strongconvex,iterations){
A = cbind(c(lipschtiz,0),c(0,strongconvex))
x_seq = matrix(ncol=(iterations+1), nrow=2)
fval_seq = rep(0,iterations+1)
x_seq[,1] = x0
fval_seq[1] = 0.5 * ( t(x0) %*% A %*% x0)
lambda = 0
y = x_seq[,1]
for (i in 1:iterations){
lambda = 0.5 * (1 + sqrt(1+4*lambda^2))
lambda_new = 0.5 * (1 + sqrt(1+4*lambda^2))
gamma = (1 - lambda) / lambda_new
set.seed(i+1)
noise = matrix(rnorm(2,mean=1,sd=4),nrow=2)
y_new = x_seq[,i] - (1 / lipschtiz) * ( A %*% x_seq[,i] + noise)
x_seq[,i+1] = (1 - gamma) * y_new + gamma * y
y = y_new
fval_seq[i+1] =  0.5 * ( t(x_seq[,i+1]) %*% A %*% x_seq[,i+1])
}
# for contour plot
x1 <- seq(-(1.1*x0[1,]),(1.1*x0[2,]),length.out = 100)
x2 <- seq(-(1.1*x0[1,]),(1.1*x0[2,]),length.out = 100)
z <- matrix(ncol=100,nrow=100)
for (i in seq_len(100)){
for (j in seq_len(100)){
x <- c(x1[i],x2[j])
z[i,j] <- 0.5 * t(x) %*% A %*% x
}
}
results = list (fval_seq = fval_seq, x_seq = x_seq, x1=x1, x2=x2, z=z)
return (results)
}
x0 = matrix(c(0.1,0.1),nrow=2)
results_diverge = nagd(x0,lipschtiz=200,strongconvex=1,iterations=100)
lambda = 0
results_diverge$fval_seq
plot(results_diverge$fval_seq,type="l",col="red",lty=1,xlab = "iterations",ylab = "error")
